#include <stdio.h>
#include <stdlib.h>
#include <math.h>

typedef struct AVLNode {
  int data;
  int height;
  struct AVLNode* left;
  struct AVLNode* right;
} AVLNode;

int height(AVLNode* node) {
  if (node == NULL) {
    return 0;
  }
  return node->height;
}

int balance_factor(AVLNode* node) {
  if (node == NULL) {
    return 0;
  }
  return height(node->left) - height(node->right);
}

//To perform a right rotation on an AVL node
AVLNode* right_rotate(AVLNode* node) {
  AVLNode* left_child = node->left;
  AVLNode* right_child = left_child->right;

  left_child->right = node;
  node->left = right_child;

  node->height = 1 + fmax(height(node->left), height(node->right));
  left_child->height = 1 + fmax(height(left_child->left), height(left_child->right));

  return left_child;
}

//To perform a left rotation on an AVL node
AVLNode* left_rotate(AVLNode* node) {
  AVLNode* right_child = node->right;
  AVLNode* left_child = right_child->left;

  right_child->left = node;
  node->right = left_child;

  node->height = 1 + fmax(height(node->left), height(node->right));
  right_child->height = 1 + fmax(height(right_child->left), height(right_child->right));

  return right_child;
}

//To insert a new value into the AVL tree
AVLNode* insert(AVLNode* root, int data) {
  if (root == NULL) {
    root = (AVLNode*)malloc(sizeof(AVLNode));
    root->data = data;
    root->height = 1;
    root->left = NULL;
    root->right = NULL;
    return root;
  }
  else if (data < root->data) {
    root->left = insert(root->left, data);
  }
  else {
    root->right = insert(root->right, data);
  }
    root->height = 1 + fmax(height(root->left), height(root->right));

    int balance = balance_factor(root);

    //If the balance factor is greater than 1, the tree is left-heavy
    if (balance > 1) {
        //If the left child is left-heavy, perform a right rotation on the root
        if (balance_factor(root->left) > 0) {
            return right_rotate(root);
        }
        //If the left child is right-heavy, perform a left-right rotation
        else {
            root->left = left_rotate(root->left);
            return right_rotate(root);
        }
    }
    //If the balance factor is less than -1, the tree is right-heavy
    else if (balance < -1) {
    //If the right child is right-heavy, perform a left rotation on the root
        if (balance_factor(root->right) < 0) {
            return left_rotate(root);
        }
        //If the right child is left-heavy, perform a right-left rotation
        else {
            root->right = right_rotate(root->right);
            return left_rotate(root);
        }
    }
    //If the tree is balanced, return the root unchanged
    return root;
}

//To search for a value in the AVL tree
AVLNode* search(AVLNode* root, int data) {
    if (root == NULL || root->data == data) {
        return root;
    }
    //If the entered value is less than the current node, search the left subtree
    else if (data < root->data) {
        return search(root->left, data);
    }
    //If the entered value is greater than the current node, search the right subtree
    else {
        return search(root->right, data);
    }
}

//To delete a value from the AVL tree
AVLNode* delete(AVLNode* root, int data) {
    if (root == NULL) {
        return root;
    }
    else if (data < root->data) {
        root->left = delete(root->left, data);
    }
    else if (data > root->data) {
        root->right = delete(root->right, data);
    }
    else {
        if (root->left == NULL || root->right == NULL) {
            AVLNode* temp = root->left ? root->left : root->right;
            if (temp == NULL) {
                temp = root;
                root = NULL;
            }
            else {
                *root = *temp;
            }
            free(temp);
        }
        // If the node has two children, we find the inorder successor and replace the node with it
        else {
            AVLNode *temp = root->right;
                while (temp->left != NULL) {
                    temp = temp->left;
                }
            root->data = temp->data;
            root->right = delete(root->right, temp->data);
        }
    }
    if (root == NULL) {
        return root;
    }

    root->height = 1 + fmax(height(root->left), height(root->right));
    int balance = balance_factor(root);

    //If the balance factor is greater than 1, the tree is left-heavy
    if (balance > 1) {
        //If the left child is left-heavy, perform a right rotation on the root
        if (balance_factor(root->left) > 0) {
            return right_rotate(root);
        }
        //If the left child is right-heavy, perform a left-right rotation
        else {
            root->left = left_rotate(root->left);
            return right_rotate(root);
        }
    }
    //If the balance factor is less than -1, the tree is right-heavy
    else if (balance < -1) {
        //If the right child is right-heavy, perform a left rotation on the root
        if (balance_factor(root->right) < 0) {
            return left_rotate(root);
        }
        //If the right child is left-heavy, perform a right-left rotation
        else {
            root->right = right_rotate(root->right);
            return left_rotate(root);
        }
    }

    //If the tree is balanced, return the root unchanged
    return root;
}

//Traverse the AVL tree inorder and print the values
void inorder(AVLNode* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

int main() {
    AVLNode* root = NULL;

    root = insert(root, 1);
    root = insert(root, 2);
    root = insert(root, 3);
    root = insert(root, 4);
    root = insert(root, 5);
    root = insert(root, 6);

    //Print the inorder traversal of the tree
    printf("In-order traversal: ");
    inorder(root);
    printf("\n");

    //Searching for a value in the tree
    AVLNode* result = search(root, 3);
    if (result != NULL) {
        printf("Found value: %d\n", result->data);
    }
    else {
        printf("Value not found\n");
    }

    //Deleting a value from the tree
    root = delete(root, 3);
    printf("In-order traversal after deletion: ");
    inorder(root);
    printf("\n");

    return 0;
}

