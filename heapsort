#include <stdio.h>
#include <stdlib.h>

#define LEFT(i) (2*i + 1)
#define RIGHT(i) (2*i + 2)
#define PARENT(i) ((i-1)/2)

typedef struct {
  int size;
  int capacity;
  int *data;
} heap_t;

void swap(int *a, int *b) {
  int temp = *a;
  *a = *b;
  *b = temp;
}

void heapify(heap_t *heap, int i) {
  int smallest = i;
  int left = LEFT(i);
  int right = RIGHT(i);

  if (left < heap->size && heap->data[left] < heap->data[smallest]) {
    smallest = left;
  }

  if (right < heap->size && heap->data[right] < heap->data[smallest]) {
    smallest = right;
  }

  if (smallest != i) {
    swap(&heap->data[i], &heap->data[smallest]);
    heapify(heap, smallest);
  }
}

heap_t *create_heap(int capacity) {
  heap_t *heap = malloc(sizeof(heap_t));
  heap->size = 0;
  heap->capacity = capacity;
  heap->data = malloc(capacity * sizeof(int));
  return heap;
}

void insert(heap_t *heap, int value) {
  if (heap->size == heap->capacity) {
    printf("Error: heap is full\n");
    return;
  }

  heap->data[heap->size] = value;
  int i = heap->size;
  heap->size++;

  while (i != 0 && heap->data[PARENT(i)] > heap->data[i]) {
    swap(&heap->data[i], &heap->data[PARENT(i)]);
    i = PARENT(i);
  }
}

int extract_min(heap_t *heap) {
  if (heap->size == 0) {
    printf("Error: heap is empty\n");
    return -1;
  }

  int min = heap->data[0];
  heap->data[0] = heap->data[heap->size - 1];
  heap->size--;
  heapify(heap, 0);
  return min;
}

int main() {
  heap_t *heap = create_heap(10);

  insert(heap, 3);
  insert(heap, 2);
  insert(heap, 1);
  insert(heap, 15);
  insert(heap, 5);
  insert(heap, 4);
  insert(heap, 45);
  
  for(int i = 0; i<10; i++)
  {
      int x = extract_min(heap);
      if (x==-1)
      break;
      printf("Extracted min: %d\n", x);
  }
  return 0;
}
